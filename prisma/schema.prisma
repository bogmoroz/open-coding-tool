// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum SearchType {
  GoogleSearch
  Manual
  Snowballing
}

// Define the Sources model
model Source {
  id            Int        @id @default(autoincrement())
  sourceNumber  Int?       @unique
  sourceName    String
  sourceType    String
  sourceContent String
  searchType    SearchType
  codings       Coding[]
  memos         Memo[]
  url           String     @default("")
}

// Define the Codes model with a self-referencing relationship
model Code {
  id              Int      @id @default(autoincrement())
  codeName        String
  codeDescription String?
  parentId        Int?
  codings         Coding[]
  parent          Code?    @relation("ChildToParent", fields: [parentId], references: [id])
  children        Code[]   @relation("ChildToParent")
}

// Define the Coding model to represent the relationship between sources and codes
model Coding {
  id           Int     @id @default(autoincrement())
  sourceId     Int
  codeId       Int
  startIndex   Int?
  endIndex     Int?
  codedSnippet String? // Add a field for the sample string
  source       Source  @relation(fields: [sourceId], references: [id])
  code         Code    @relation(fields: [codeId], references: [id])
}

// Define the Memo model to store researcher notes
model Memo {
  id       Int    @id @default(autoincrement())
  sourceId Int
  memoText String
  source   Source @relation(fields: [sourceId], references: [id])
}

// Authentication schemas

// schema.prisma

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
